from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, ContentType
from aiogram.fsm.context import FSMContext
import asyncio

from keyboards import user_kbs
from states.user_states import UserState
from database.services.user_service import UserService
from middleware.db_di import DatabaseDI
from voice.text_to_speach import speechify_text_to_speach
from config import voice_languages
from init_bot import bot

import os


router = Router()
router.message.middleware(DatabaseDI())
router.callback_query.middleware(DatabaseDI())


@router.message(CommandStart())
async def start(message: Message, user_service: UserService):
    user = await user_service.get(message.from_user.id)

    new = False
    if not user:
        user = await user_service.create_if_not_exists(message.from_user.id)
        await user_service.update_balance(user.tg_id, 5)
        new = True

    photo = FSInputFile("images/start.jpg")
    await message.answer_photo(
        photo,
        caption=f"<b>üëã –ü—Ä–∏–≤–µ—Ç, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–∑–≤—É—á–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –ª—é–¥–µ–π\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚≠êÔ∏è\n–•–≤–∞—Ç–∏—Ç –Ω–∞: {user.balance * 150} —Å–∏–º–≤–æ–ª–æ–≤\n\n<blockquote>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞\n–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n–ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã (1 ‚≠êÔ∏è - 150 —Å–∏–º–≤–æ–ª–æ–≤)\n–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∑–∞–∫–æ–Ω–∞–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏\n–î–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å</blockquote>\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µüëá</b>",
        reply_markup=user_kbs.start_kb,
    )

    if new:
        await message.answer(
            "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ù–∞ –≤–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–æ 5‚≠êÔ∏è</b>"
        )


@router.callback_query(F.data == "voice")
async def voice_handler(callback: CallbackQuery, user_service: UserService):
    await callback.answer()

    user = await user_service.get(callback.from_user.id)

    voice = (
        user.voice.title()
        if user.voice
        else "–Ω–µ –≤—ã–±—Ä–∞–Ω\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏"
    )

    await callback.message.answer(
        f"<b>‚ö°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: {voice}</b>",
        reply_markup=user_kbs.voice_kb,
    )


@router.callback_query(F.data.startswith("choose_voice"))
async def choose_voice(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.edit_text(
            "<b>üßç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –≥–æ–ª–æ—Å–∞</b>", reply_markup=user_kbs.gender_kb
        )
    except:
        await callback.message.answer(
            "<b>üßç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –≥–æ–ª–æ—Å–∞</b>", reply_markup=user_kbs.gender_kb
        )


@router.callback_query(F.data.startswith("gender"))
async def choose_voice(callback: CallbackQuery):
    await callback.answer()

    gender = callback.data.split("_")[-1]
    voices = await speechify_text_to_speach.get_voices(gender)

    message_text = f'<b>üßç –ó–¥–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞:\n<blockquote>{"\n".join([f'{v.title()} {voice_languages[v]}' for v in voices])}</blockquote>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å</b>'

    await callback.message.edit_text(
        message_text, reply_markup=await user_kbs.voices(gender)
    )


@router.callback_query(F.data.startswith("set_voice_"))
async def set_voice(callback: CallbackQuery, user_service: UserService):
    await callback.answer()

    voice_id = callback.data.split("_")[-1]

    await user_service.set_user_voice(callback.from_user.id, voice_id)

    await callback.message.edit_text(
        f"<b>–ì–æ–ª–æ—Å {voice_id.title()} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!</b>",
        reply_markup=user_kbs.start_voice,
    )


@router.callback_query(F.data == "input_text")
async def input_text_handler(
    callback: CallbackQuery, state: FSMContext, user_service: UserService
):
    await callback.answer()

    user = await user_service.get(callback.from_user.id)

    await callback.message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2000 —Å–∏–º–≤–æ–ª–æ–≤\n\n<blockquote>1 ‚≠êÔ∏è - 150 —Å–∏–º–≤–æ–ª–æ–≤\n–í–∞—à –±–∞–ª–∞–Ω—Å {user.balance}‚≠êÔ∏è\n–•–≤–∞—Ç–∏—Ç –Ω–∞ {user.balance * 150} —Å–∏–º–≤–æ–ª–æ–≤</blockquote></b>",
        reply_markup=user_kbs.back_kb,
    )

    await state.set_state(UserState.text)


@router.message(UserState.text)
async def generate_audio(
    message: Message, state: FSMContext, user_service: UserService
):
    if message.content_type != ContentType.TEXT or len(message.text) >= 2000:
        await message.answer(
            "<b>–ù–µ –≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∑–≤—É—á–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–µ–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>"
        )
        return

    user = await user_service.get(message.from_user.id)

    if len(message.text) > user.balance * 150:
        await message.answer(
            "<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å</b>",
            reply_markup=user_kbs.dep_kb,
        )
        await state.clear()
        return

    waiting_message = await message.answer("<b>–ê—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>")

    if not user.voice:
        await message.answer(
            "<b>–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –≤—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å</b>",
            reply_markup=user_kbs.choose_voice_kb,
        )
        await waiting_message.delete()
        await state.clear()
        return

    try:
        audio_path = await speechify_text_to_speach.text_to_speach(
            message.text, user.voice, message.from_user.id
        )
    except:
        await bot.send_message(int(os.getenv('ADMIN_ID')), '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ')
        await message.answer("<b>–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ</b>")
        await waiting_message.delete()
        await state.clear()
        return

    await waiting_message.delete()

    audio = FSInputFile(audio_path, filename="audio @top_voicer_bot")
    await waiting_message.answer_audio(
        audio,
        caption="<b>‚ö°Ô∏è –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ê—É–¥–∏–æ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç?</b>",
        reply_markup=user_kbs.voice_kb,
    )
    amount = -1 * round(len(message.text) / 150) or -1
    await user_service.update_balance(message.from_user.id, amount)
    await state.clear()

    await asyncio.to_thread(os.remove, audio_path)


@router.callback_query(F.data == "back")
async def back_handler(
    callback: CallbackQuery, state: FSMContext, user_service: UserService
):
    await callback.answer()

    user = await user_service.get(callback.from_user.id)
    photo = FSInputFile("images/start.jpg")

    await callback.message.answer_photo(
        photo,
        caption=f"<b>üëã –ü—Ä–∏–≤–µ—Ç, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–∑–≤—É—á–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –ª—é–¥–µ–π\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚≠êÔ∏è\n–•–≤–∞—Ç–∏—Ç –Ω–∞: {user.balance * 150} —Å–∏–º–≤–æ–ª–æ–≤\n\n<blockquote>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞\n–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n–ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã (1 ‚≠êÔ∏è - 150 —Å–∏–º–≤–æ–ª–æ–≤)\n–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∑–∞–∫–æ–Ω–∞–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏\n–î–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å</blockquote>\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µüëá</b>",
        reply_markup=user_kbs.start_kb,
    )
    try:
        await callback.message.delete()
    except:
        pass
    await state.clear()


@router.callback_query(F.data == "back_to_menu")
async def back_handler(callback: CallbackQuery, user_service: UserService):
    await callback.answer()

    user = await user_service.get(callback.from_user.id)

    voice = (
        user.voice.title()
        if user.voice
        else "–Ω–µ –≤—ã–±—Ä–∞–Ω\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏"
    )
    await callback.message.edit_text(
        f"<b>‚ö°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: {voice}</b>",
        reply_markup=user_kbs.voice_kb,
    )


@router.message()
async def other_message(message: Message):
    await message.answer("<b>–ö–∞–∂–µ—Ç—Å—è –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É</b>")
